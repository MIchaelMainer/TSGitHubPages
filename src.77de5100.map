{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,cAAc,GAAG,IAAI,GAAJ,CAAQ,CAAC,OAAD,EAAU,kBAAV,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,OAAjD,CAAR,CAArB;;AAEA,MAAM,CAAC,MAAP,GAAgB,YAAA;AACZ,MAAI,UAAU,GAAG,QAAQ,CAAC,cAAT,CAAwB,OAAxB,CAAjB;AACA,EAAA,cAAc,CAAC,OAAf,CAAuB,UAAC,SAAD,EAAkB;AACrC,IAAA,UAAU,CAAC,gBAAX,CAA4B,SAA5B,EAAuC,UAAC,EAAD,EAAU;AAC7C,UAAI,YAAY,GAAG,EAAE,CAAC,MAAtB;AACA,UAAI,OAAO,GAAG,IAAI,gBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,UAAR,CAAmB,YAAnB;AACH,KAJD;AAKH,GAND;AAOH,CATD;;AAWA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAgCC;;AAzBU,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,YAAlB,EAAgD;AAC5C;AACA,QAAI,QAAQ,GAAG,YAAY,CAAC,KAA5B;AACA,QAAI,KAAK,GAAG,MAAM,CAAC,QAAD,CAAlB;AAEA,QAAI,UAAU,GAAG,MAAM,EAAvB,CAL4C,CAM5C;;AACA,QAAI,KAAK,CAAC,KAAD,CAAT,EAAkB;AACd,MAAA,UAAU,GAAG,2BAAb;AACH,KAT2C,CAW5C;;;AACA,QAAI,eAAe,GAAG,KAAK,GAAG,gBAAgB,CAAC,UAA/C;AACA,QAAI,sBAAsB,GAAG,eAAe,GAAG,gBAAgB,CAAC,mBAAhE,CAb4C,CAc5C;;AACA,QAAI,sBAAsB,GAAG,gBAAgB,CAAC,mBAA9C,EAAmE;AAC/D,MAAA,UAAU,GAAG,2BAAb;AACH,KAjB2C,CAmB5C;;;AACA,QAAI,IAAI,GAAG,IAAI,IAAJ,CAAS,sBAAT,CAAX;AACA,WAAO,IAAI,CAAC,WAAL,EAAP;AACA,QAAI,cAAc,GAAG,QAAQ,CAAC,cAAT,CAAwB,UAAxB,CAArB;AACA,IAAA,cAAc,CAAC,SAAf,GAA2B,UAA3B;AACH,GAxBM,CAPX,CACI;;;AACO,EAAA,gBAAA,CAAA,UAAA,GAAqB,kBAArB;AACA,EAAA,gBAAA,CAAA,mBAAA,GAA8B,KAA9B,CAHX,CAII;;AACO,EAAA,gBAAA,CAAA,mBAAA,GAA8B,gBAA9B;AA2BX,SAAA,gBAAA;AAhCA,CAAA,EAAA","file":"src.77de5100.map","sourceRoot":"../src","sourcesContent":["var possibleEvents = new Set([\"input\", \"onpropertychange\", \"keyup\", \"change\", \"paste\"]);\n\nwindow.onload = () => {\n    var ticksInput = document.getElementById(\"ticks\") as HTMLInputElement;\n    possibleEvents.forEach((eventName: string) => {\n        ticksInput.addEventListener(eventName, (ev: Event) => {\n            var inputElement = ev.target as HTMLInputElement;\n            var handler = new TickInputHandler();\n            handler.showResult(inputElement);\n        })\n    });\n};\n\nclass TickInputHandler {\n    // Ticks value for date 01-01-1970\n    static epochTicks: number = 621355968000000000;\n    static ticksPerMillisecond: number = 10000;\n    // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n    static maxDateMilliseconds: number = 8640000000000000;\n\n    public showResult(inputElement: HTMLInputElement) {\n        // Get value from the input and try to convert it to type Number\n        var valueStr = inputElement.value;\n        var ticks = Number(valueStr);\n\n        var dateString = String();\n        // If we were not able to parse input as a Number - show empty DateTimeString\n        if (isNaN(ticks)) {\n            dateString = \"____-__-__T__:__:__.____Z\";\n        }\n\n        // convert the ticks into something typescript understands\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\n        // If the value of the input is more than max value - show special DateTime string for this case\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\n            dateString = \"9999-99-99T99:99:99:9999Z\";\n        }\n\n        // output the result in something the human understands\n        var date = new Date(millisecondsSinceEpoch);\n        return date.toISOString();\n        var dateTimeOutput = document.getElementById(\"datetime\");\n        dateTimeOutput.innerHTML = dateString;\n    }\n}"]}