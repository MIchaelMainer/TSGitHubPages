{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAAA,IAAI,EAAiB,IAAI,IAAI,CAAC,QAAS,mBAAoB,QAAS,SAAU,UAE9E,OAAO,OAAS,WACR,IAAA,EAAa,SAAS,eAAe,SACzC,EAAe,QAAQ,SAAC,GACpB,EAAW,iBAAiB,EAAW,SAAC,GAChC,IAAA,EAAe,EAAG,QACR,IAAI,GACV,WAAW,QAK/B,IAAA,EAAA,WAAA,SAAA,KAgCA,OAzBW,EAAA,UAAA,WAAP,SAAkB,GAEV,IAAA,EAAW,EAAa,MACxB,EAAQ,OAAO,GAEF,SAEb,MAAM,GAKN,IACA,GADkB,EAAQ,EAAiB,YACA,EAAiB,oBAQzD,OANH,EAAyB,EAAiB,qBAC7B,4BAIN,IAAI,KAAK,GACR,eA1BT,EAAA,WAAqB,YACrB,EAAA,oBAA8B,IAE9B,EAAA,oBAA8B,OA2BzC,EAhCA","file":"src.c54d1d3b.map","sourceRoot":"../src","sourcesContent":["var possibleEvents = new Set([\"input\", \"onpropertychange\", \"keyup\", \"change\", \"paste\"]);\n\nwindow.onload = () => {\n    var ticksInput = document.getElementById(\"ticks\") as HTMLInputElement;\n    possibleEvents.forEach((eventName: string) => {\n        ticksInput.addEventListener(eventName, (ev: Event) => {\n            var inputElement = ev.target as HTMLInputElement;\n            var handler = new TickInputHandler();\n            handler.showResult(inputElement);\n        })\n    });\n};\n\nclass TickInputHandler {\n    // Ticks value for date 01-01-1970\n    static epochTicks: number = 621355968000000000;\n    static ticksPerMillisecond: number = 10000;\n    // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n    static maxDateMilliseconds: number = 8640000000000000;\n\n    public showResult(inputElement: HTMLInputElement) {\n        // Get value from the input and try to convert it to type Number\n        var valueStr = inputElement.value;\n        var ticks = Number(valueStr);\n\n        var dateString = String();\n        // If we were not able to parse input as a Number - show empty DateTimeString\n        if (isNaN(ticks)) {\n            dateString = \"____-__-__T__:__:__.____Z\";\n        }\n\n        // convert the ticks into something typescript understands\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\n        // If the value of the input is more than max value - show special DateTime string for this case\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\n            dateString = \"9999-99-99T99:99:99:9999Z\";\n        }\n\n        // output the result in something the human understands\n        var date = new Date(millisecondsSinceEpoch);\n        return date.toISOString();\n        var dateTimeOutput = document.getElementById(\"datetime\");\n        dateTimeOutput.innerHTML = dateString;\n    }\n}"]}